name: Chocolatine Workflow

on:
  push:
    branches-ignore:
      - "ga-ignore-*"
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

env:
  MIRROR_URL: ${{ vars.MIRROR_URL }}
  EXECUTABLES: ${{ vars.EXECUTABLES }}
  ALLOWED_FUNCTIONS: ${{ vars.ALLOWED_FUNCTIONS }}

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    if: vars.MIRROR_URL != '' || vars.MIRROR_URL != null
    steps:
      - name: Checkout reposity
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run coding-style checker
        run: check.sh . /tmp
      - name: Create annotation for coding-style errors
        run: |
          input=/tmp/coding-style-reports.log
          while IFS= read -r -a line; do
            fields=($(printf "%s" "$line"|cut -d':' --output-delimiter=' ' -f1-))
            echo "::error title=${fields[2]} coding style error,file=${fields[0]},line=${fields[1]}::${fields[3]}"
          done < $input
      - name: Check if coding-style errors
        run: |
          NB_ERROR=$(cat /tmp/coding-style-reports.log | wc -l)
          if [ $NB_ERROR -gt 0 ]; then
            exit 1
          fi

  check_program_compilation:
    name: Check Program Compilation
    runs-on: ubuntu-latest
    needs: check_coding_style
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout reposity
        uses: actions/checkout@v4

      - name: Building project
        run: make
        timeout-minutes: 2

      - name: Cleaning project
        run: make clean

      - name: Verify Executables
        run: |
          IFS=',' read -ra EXECS <<< "$EXECUTABLES"
          for exe in "${EXECS[@]}"; do
            if [ ! -x "$exe" ]; then
              echo "Executable $exe not found or not executable"
              exit 1
            fi
          done

  push_to_mirror:
    name: Push to Mirror Repository
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: check_program_compilation
    steps:
      - name: Checkout reposity
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - name: Push to Mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
          target_repo_url: ${{ env.MIRROR_URL }}